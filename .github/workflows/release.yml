name: Auto Release

on:
  push:
    branches: [ main ]

jobs:
  check-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      should_release: ${{ steps.version_check.outputs.should_release }}
      new_version: ${{ steps.version_check.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if version changed
        id: version_check
        run: |
          # Extract version from script
          SCRIPT_VERSION=$(grep '^VERSION=' fav | cut -d'"' -f2)
          echo "Script version: $SCRIPT_VERSION"
          
          # Get latest tag or default to 0.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          echo "Latest tag version: $LATEST_VERSION"
          
          # Compare versions
          if [ "$SCRIPT_VERSION" != "$LATEST_VERSION" ]; then
            echo "Version changed from $LATEST_VERSION to $SCRIPT_VERSION"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "new_version=v$SCRIPT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged at $SCRIPT_VERSION"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  test:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: macos-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Install test dependencies
        run: |
          brew tap bats-core/bats-core
          brew install bats-core shellcheck
      
      - name: Run shellcheck
        run: |
          shellcheck fav
          shellcheck fav-completion.bash
      
      - name: Run tests
        run: |
          chmod +x ./fav
          bats test/*.bats
      
      - name: Verify version consistency
        run: |
          # Check that VERSION in script matches what we're about to release
          SCRIPT_VERSION=$(grep '^VERSION=' fav | cut -d'"' -f2)
          EXPECTED_VERSION="${{ needs.check-version.outputs.new_version }}"
          EXPECTED_VERSION=${EXPECTED_VERSION#v}
          
          if [ "$SCRIPT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "Error: Version mismatch!"
            echo "Script: $SCRIPT_VERSION"
            echo "Expected: $EXPECTED_VERSION"
            exit 1
          fi

  release:
    needs: [check-version, test]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get commit message
        id: commit
        run: |
          # Get commit message from the latest commit
          COMMIT_MESSAGE=$(git log -1 --pretty=%s)
          COMMIT_BODY=$(git log -1 --pretty=%b)
          
          # Combine subject and body for full message
          if [ -n "$COMMIT_BODY" ]; then
            FULL_MESSAGE="$COMMIT_MESSAGE"$'\n\n'"$COMMIT_BODY"
          else
            FULL_MESSAGE="$COMMIT_MESSAGE"
          fi
          
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$FULL_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create tag and release
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ needs.check-version.outputs.new_version }}
          git push origin ${{ needs.check-version.outputs.new_version }}
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-version.outputs.new_version }}
          release_name: Release ${{ needs.check-version.outputs.new_version }}
          body: ${{ steps.commit.outputs.message }}
          draft: false
          prerelease: false
      
      - name: Update Homebrew Formula
        run: |
          VERSION=${{ needs.check-version.outputs.new_version }}
          TARBALL_URL="https://github.com/chriopter/homebrew-fav/archive/refs/tags/${VERSION}.tar.gz"
          
          # Wait a bit for GitHub to process the tag
          sleep 5
          
          # Download tarball and calculate SHA256
          curl -sL "$TARBALL_URL" -o fav.tar.gz
          SHA256=$(shasum -a 256 fav.tar.gz | cut -d' ' -f1)
          
          # Update formula version (remove 'v' prefix)
          VERSION_NUM=${VERSION#v}
          
          # Update formula
          sed -i "s|url \".*\"|url \"$TARBALL_URL\"|" Formula/fav.rb
          sed -i "s|sha256 \".*\"|sha256 \"$SHA256\"|" Formula/fav.rb
          
          # Commit and push
          git add Formula/fav.rb
          git commit -m "Update formula for version ${VERSION}"
          git push