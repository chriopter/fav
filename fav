#!/usr/bin/env bash

VERSION="0.1.0"
ICLOUD_DIR="$HOME/Library/Mobile Documents/com~apple~CloudDocs"
FAV_DIR="$ICLOUD_DIR/homebrew-fav"
FAV_FILE="$FAV_DIR/fav_favorites.txt"

show_help() {
    cat << EOF
fav - A bash favorite command tool for macOS

USAGE:
    fav [COMMAND] [OPTIONS]

COMMANDS:
    add "command"        Add a command to favorites
    list                 List all favorite commands
    remove <index>       Remove a command by index
    setup                Configure shell completion
    setup --check        Check if completion is configured
    setup --shell <sh>   Configure for specific shell (zsh/bash)
    help                 Show this help message
    version              Show version information

OPTIONS:
    -h, --help           Show this help message
    -v, --version        Show version information

EXAMPLES:
    fav add "git status --porcelain"
    fav add docker ps -a         # Quotes optional
    fav list                     # Show all favorites
    fav remove 2                 # Remove by index
    fav setup                    # Auto-configure completion
    fav setup --check            # Check completion status
    fav setup --shell zsh        # Configure for zsh
    fav "docker ps -a"           # Execute exact command
    fav                          # Lists all commands

For more information, see man fav
EOF
}

show_version() {
    echo "fav version $VERSION"
}

init_fav_file() {
    # Create the directory if it doesn't exist
    if [[ ! -d "$FAV_DIR" ]]; then
        mkdir -p "$FAV_DIR"
    fi
    
    # Create the file if it doesn't exist
    if [[ ! -f "$FAV_FILE" ]]; then
        touch "$FAV_FILE"
    fi
}

add_command() {
    if [[ -z "$*" ]]; then
        echo "Error: No command provided"
        echo "Usage: fav add \"command with arguments\""
        exit 1
    fi
    
    init_fav_file
    echo "$*" >> "$FAV_FILE"
    echo "Added to favorites: $*"
}

list_commands() {
    init_fav_file
    
    if [[ ! -s "$FAV_FILE" ]]; then
        echo "No favorite commands saved yet."
        echo "Use 'fav add \"command\"' to add a command."
        return
    fi
    
    echo "Favorite commands:"
    local index=1
    while IFS= read -r cmd; do
        echo "  $index. $cmd"
        ((index++))
    done < "$FAV_FILE"
}

remove_command() {
    if [[ -z "$1" ]] || ! [[ "$1" =~ ^[0-9]+$ ]]; then
        echo "Error: Please provide a valid index number"
        echo "Usage: fav remove <index>"
        exit 1
    fi
    
    init_fav_file
    
    if [[ ! -s "$FAV_FILE" ]]; then
        echo "No favorite commands to remove."
        exit 1
    fi
    
    local total_lines=$(wc -l < "$FAV_FILE")
    
    if [[ $1 -lt 1 ]] || [[ $1 -gt $total_lines ]]; then
        echo "Error: Index $1 is out of range (1-$total_lines)"
        exit 1
    fi
    
    local removed_cmd=$(sed -n "${1}p" "$FAV_FILE")
    sed -i '' "${1}d" "$FAV_FILE"
    echo "Removed from favorites: $removed_cmd"
}

setup_completion() {
    local shell_type="${1:-auto}"
    local check_only="${2:-false}"
    
    # Auto-detect shell if not specified
    if [[ "$shell_type" == "auto" ]]; then
        # Check the user's default shell first (most reliable)
        case "$SHELL" in
            */zsh)
                shell_type="zsh"
                ;;
            */bash)
                shell_type="bash"
                ;;
            *)
                # Fallback to checking version variables (only works if running in that shell)
                if [[ -n "$ZSH_VERSION" ]]; then
                    shell_type="zsh"
                elif [[ -n "$BASH_VERSION" ]]; then
                    shell_type="bash"
                else
                    echo "Error: Unable to detect shell type"
                    echo "Your default shell is: $SHELL"
                    echo "Please specify: fav setup --shell zsh or fav setup --shell bash"
                    exit 1
                fi
                ;;
        esac
    fi
    
    echo "Detected shell: $shell_type"
    
    # Define RC file and completion config
    local rc_file
    local completion_config
    
    if [[ "$shell_type" == "zsh" ]]; then
        rc_file="$HOME/.zshrc"
        completion_config='# fav completion setup
if type brew &>/dev/null; then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
  autoload -Uz compinit
  compinit
fi

# Enable pure inline cycling (no list display) and shift-tab for reverse cycling
zstyle ":completion:*" menu no
bindkey "^[[Z" reverse-menu-complete

# Enable case-insensitive completion matching
zstyle ":completion:*" matcher-list "m:{a-zA-Z}={A-Za-z}"'
    elif [[ "$shell_type" == "bash" ]]; then
        rc_file="$HOME/.bash_profile"
        if [[ ! -f "$rc_file" ]]; then
            rc_file="$HOME/.bashrc"
        fi
        completion_config='# fav completion setup
if type brew &>/dev/null; then
  HOMEBREW_PREFIX="$(brew --prefix)"
  if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
    source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
  fi
fi'
    else
        echo "Error: Unsupported shell type: $shell_type"
        exit 1
    fi
    
    # Check if completion is already configured
    if grep -q "fav completion setup" "$rc_file" 2>/dev/null; then
        echo "✓ Tab completion is already configured in $rc_file"
        if [[ "$check_only" == "true" ]]; then
            exit 0
        fi
        echo "No changes needed."
        return
    fi
    
    if [[ "$check_only" == "true" ]]; then
        echo "✗ Tab completion is NOT configured in $rc_file"
        echo "Run 'fav setup' to configure it."
        exit 1
    fi
    
    # Create RC file if it doesn't exist
    if [[ ! -f "$rc_file" ]]; then
        echo "Creating $rc_file..."
        touch "$rc_file"
    fi
    
    # Backup RC file
    local backup_file="${rc_file}.backup.$(date +%Y%m%d_%H%M%S)"
    cp "$rc_file" "$backup_file"
    echo "Created backup: $backup_file"
    
    # Add completion config
    echo "" >> "$rc_file"
    echo "$completion_config" >> "$rc_file"
    echo "" >> "$rc_file"
    
    echo "✓ Added tab completion configuration to $rc_file"
    echo ""
    echo "To activate completion, either:"
    echo "  1. Restart your terminal, or"
    echo "  2. Run: source $rc_file"
    echo ""
    echo "Then try: fav <TAB>"
}

case "$1" in
    -h|--help|help)
        show_help
        ;;
    -v|--version|version)
        show_version
        ;;
    add)
        shift
        add_command "$@"
        ;;
    list)
        list_commands
        ;;
    remove)
        shift
        remove_command "$1"
        ;;
    setup)
        shift
        case "$1" in
            --check)
                setup_completion "auto" "true"
                ;;
            --shell)
                shift
                setup_completion "$1" "false"
                ;;
            *)
                setup_completion "auto" "false"
                ;;
        esac
        ;;
    "")
        list_commands
        ;;
    *)
        # Check if the argument matches a favorite command exactly
        init_fav_file
        if [[ -f "$FAV_FILE" ]] && [[ -s "$FAV_FILE" ]]; then
            # Try to find and execute an exact matching command
            found=false
            while IFS= read -r cmd; do
                if [[ "$cmd" == "$*" ]]; then
                    echo "Executing: $cmd"
                    eval "$cmd"
                    found=true
                    break
                fi
            done < "$FAV_FILE"
            
            if [[ "$found" == false ]]; then
                echo "Error: Unknown command '$*'"
                echo "Use 'fav --help' for usage information"
                echo "Hint: Use tab completion to see available commands"
                exit 1
            fi
        else
            echo "Error: Unknown command '$*'"
            echo "Use 'fav --help' for usage information"
            exit 1
        fi
        ;;
esac